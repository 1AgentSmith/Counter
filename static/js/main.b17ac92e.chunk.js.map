{"version":3,"sources":["Display.tsx","Animation.tsx","Button.tsx","Setting.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","startNum","inputStartValue","maxNum","inputMaxValue","setError","setIncorrectValue","className","counterNum","incorrectValue","error","Animation","Button","onClick","onClickHandler","disabled","title","Setting","type","value","onChange","e","setMaxNum","currentTarget","setStartNum","counter","startValue","maxValue","App","useState","setCounterNum","isDisabled","setIsDisabled","incorrectValueError","setIncorrectValueError","useEffect","valueMaxNum","localStorage","getItem","newValueMaxNum","JSON","parse","valueStartNum","newValueStartNum","setItem","stringify","min","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAeaA,EAAU,SAACC,GAOpB,OANIA,EAAMC,WAAaD,EAAME,iBAAmBF,EAAMG,SAAWH,EAAMI,eACnEJ,EAAMK,UAAS,GAEfL,EAAMC,SAAW,GAAKD,EAAMG,OAAS,GAAKH,EAAMC,WAAaD,EAAMG,QAAUH,EAAMC,SAAWD,EAAMG,OACpGH,EAAMM,mBAAkB,GACrBN,EAAMM,mBAAkB,GAE3B,qBAAKC,UAAWP,EAAMQ,aAAeR,EAAMI,cAAgB,mBAAqB,UAAhF,SACKJ,EAAMS,eAAiB,qBAAKF,UAAW,kBAAhB,8BACpBP,EAAMU,MAAQ,qBAAKH,UAAW,kBAAhB,0CACVP,EAAMQ,cC1BnB,SAASG,IACZ,OACI,gCACI,qBAAKJ,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,gBCFpB,SAASK,EAAOZ,GACnB,OACI,8BACI,wBAAQa,QAASb,EAAMc,eAAgBC,SAAUf,EAAMe,SAAvD,SAAkEf,EAAMgB,UCD7E,SAASC,EAAQjB,GASpB,OACI,sBAAKO,UAAW,iBAAhB,UACI,gCACI,sBAAMA,UAAW,WAAjB,uBACA,uBAAOA,UAAWP,EAAMG,SAAWH,EAAMC,UAAYD,EAAMG,OAASH,EAAMC,SAAU,iBAAmB,GAChGiB,KAAK,SACLC,MAAOnB,EAAMG,OACbiB,SAVa,SAACC,GAC7BrB,EAAMsB,WAAWD,EAAEE,cAAcJ,aAW7B,gCACI,+CACA,uBAAOZ,UAAWP,EAAMC,SAAW,GAAKD,EAAMC,WAAaD,EAAMG,OAAS,iBAAmB,GACtFe,KAAK,SACLC,MAAOnB,EAAMC,SACbmB,SArBe,SAACC,GAE/BrB,EAAMwB,aAAaH,EAAEE,cAAcJ,gBCP3C,IAAIM,EAAU,CACVC,WAAY,EACZC,SAAU,GAiGCC,MA9Ff,WAAgB,IAAD,EACuBC,mBAAS,GADhC,mBACNrB,EADM,KACMsB,EADN,OAEmBD,mBAAS,GAF5B,mBAEN5B,EAFM,KAEIuB,EAFJ,OAGeK,mBAAS,GAHxB,mBAGN1B,EAHM,KAGEmB,EAHF,OAIaO,oBAAS,GAJtB,mBAINnB,EAJM,KAICL,EAJD,OAKuBwB,oBAAS,GALhC,mBAKNE,EALM,KAKMC,EALN,OAMyCH,oBAAS,GANlD,mBAMNI,EANM,KAMeC,EANf,KAsDX,OA9CAC,qBAAU,WACN,IAAIC,EAAcC,aAAaC,QAAQ,aACvC,GAAGF,EAAa,CACZ,IAAIG,EAAiBC,KAAKC,MAAML,GAChCd,EAAUiB,MAEf,IACHJ,qBAAU,WACN,IAAIO,EAAgBL,aAAaC,QAAQ,eACzC,GAAGI,EAAe,CACd,IAAIC,EAAmBH,KAAKC,MAAMC,GAClClB,EAAYmB,MAEjB,IACHR,qBAAU,WACNE,aAAaO,QAAQ,YAAaJ,KAAKK,UAAU1C,MAClD,CAACA,IACJgC,qBAAU,WACNE,aAAaO,QAAQ,cAAeJ,KAAKK,UAAU5C,MACpD,CAACA,IAEJkC,qBAAU,WACNH,GAAc,KACf,CAAC/B,EAAUE,IAwBV,sBAAKI,UAAW,MAAhB,UACI,cAACI,EAAD,IACA,cAAC,EAAD,CAASH,WAAYA,EACZP,SAAUA,EACVE,OAAQA,EACRC,cAAeqB,EAAQE,SACvBzB,gBAAiBuB,EAAQC,WACzBrB,SAAUA,EACVK,MAAOA,EACPJ,kBAAmB4B,EACnBzB,eAAgBwB,IAEzB,cAAChB,EAAD,CAASd,OAAQA,EACRF,SAAUA,EACVuB,YAAaA,EACbF,UAAWA,EACXZ,MAAOA,EACPuB,oBAAqBA,IAE9B,cAACrB,EAAD,CACII,MAAO,MAEPD,SAAUgB,GAAcE,EACxBnB,eA7BkB,WAPR,IAACgC,EAAaC,EAAbD,EAQL7C,EARkB8C,EAQR5C,EAPxBsB,EAAQC,WAAaoB,EACrBrB,EAAQE,SAAWoB,EACnBjB,EAAcL,EAAQC,YACtBrB,GAAS,GACT6B,GAAuB,GAIvBF,GAAc,MA6BV,cAACpB,EAAD,CACII,MAAO,MACPD,SAAUL,GAASuB,GAAuBR,EAAQE,WAAanB,EAC/DM,eAjDQ,WACZN,EAAaiB,EAAQE,UACrBG,EAActB,EAAa,MAiD3B,cAACI,EAAD,CACII,MAAO,QACPF,eAhDK,WACbgB,EAAcL,EAAQC,aAgDdX,SAAUL,GAASuB,QCvFpBe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b17ac92e.chunk.js","sourcesContent":["import React from 'react';\n\ntype PropsType = {\n    startNum: number\n    maxNum: number\n    counterNum: number\n    inputMaxValue: number\n    inputStartValue: number\n    setError: (value: boolean) => void\n    error: boolean\n    setIncorrectValue: (value: boolean) => void\n    incorrectValue: boolean\n}\n\n\nexport const Display = (props: PropsType) => {\n    if (props.startNum !== props.inputStartValue || props.maxNum !== props.inputMaxValue) {\n        props.setError(true)\n    }\n    if (props.startNum < 0 || props.maxNum < 0 || props.startNum === props.maxNum || props.startNum > props.maxNum) {\n        props.setIncorrectValue(true)\n    } else props.setIncorrectValue(false)\n    return (\n        <div className={props.counterNum === props.inputMaxValue ? 'DisplayIncorrect' : 'Display'}>\n            {props.incorrectValue ? <div className={'setDisplayError'}>Incorrect value!</div> :\n                props.error ? <div className={'setDisplayError'}>enter values end press 'set'</div> :\n                    props.counterNum}\n        </div>\n    )\n}","export function Animation() {\n    return(\n        <div>\n            <div className='light x1'></div>\n            <div className='light x2'></div>\n            <div className='light x3'></div>\n            <div className='light x4'></div>\n            <div className='light x5'></div>\n            <div className='light x6'></div>\n            <div className='light x7'></div>\n            <div className='light x8'></div>\n            <div className='light x9'></div>\n        </div>\n    )\n}","import React from 'react'\n\n\nexport type PropsTypeButton = {\n    title: string\n    disabled?: boolean\n    onClickHandler: () => void\n}\n\nexport function Button(props: PropsTypeButton) {\n    return (\n        <div>\n            <button onClick={props.onClickHandler} disabled={props.disabled}>{props.title}</button>\n        </div>\n    )\n}","import React, {ChangeEvent} from 'react';\n\ntype PropsTypeSetting = {\n    maxNum: number\n    startNum: number\n    setStartNum: (value: number) => void\n    setMaxNum: (value: number) => void\n    error: boolean\n    incorrectValueError: boolean\n}\n\nexport function Setting(props: PropsTypeSetting) {\n\n    const onStartValueChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n\n        props.setStartNum(+e.currentTarget.value)\n    }\n    const onMaxValueChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.setMaxNum(+e.currentTarget.value)\n    }\n    return (\n        <div className={'InputContainer'}>\n            <div>\n                <span className={'span_Max'}>Max value</span>\n                <input className={props.maxNum === props.startNum || props.maxNum < props.startNum? 'RedBorderInput' : ''}\n                       type=\"number\"\n                       value={props.maxNum}\n                       onChange={onMaxValueChangeHandler}/>\n            </div>\n            <div>\n                <span>Start value</span>\n                <input className={props.startNum < 0 || props.startNum === props.maxNum ? 'RedBorderInput' : ''}\n                       type=\"number\"\n                       value={props.startNum}\n                       onChange={onStartValueChangeHandler}/>\n            </div>\n        </div>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Display} from './Display';\nimport {Animation} from './Animation';\nimport {Button} from './Button';\nimport {Setting} from './Setting';\n\n\nlet counter = {\n    startValue: 0,\n    maxValue: 0,\n}\n\nfunction App() {\n    let [counterNum, setCounterNum] = useState(0)\n    let [startNum, setStartNum] = useState(0)\n    let [maxNum, setMaxNum] = useState(0)\n    let [error, setError] = useState(false)\n    let [isDisabled, setIsDisabled] = useState(false)\n    let [incorrectValueError, setIncorrectValueError] = useState(false)\n\n    useEffect(()=> {\n        let valueMaxNum = localStorage.getItem('Max value')\n        if(valueMaxNum) {\n            let newValueMaxNum = JSON.parse(valueMaxNum)\n            setMaxNum(newValueMaxNum)\n        }\n    }, [])\n    useEffect(()=> {\n        let valueStartNum = localStorage.getItem('Start value')\n        if(valueStartNum) {\n            let newValueStartNum = JSON.parse(valueStartNum)\n            setStartNum(newValueStartNum)\n        }\n    }, [])\n    useEffect(()=> {\n        localStorage.setItem('Max value', JSON.stringify(maxNum))\n    }, [maxNum])\n    useEffect(()=> {\n        localStorage.setItem('Start value', JSON.stringify(startNum))\n    }, [startNum])\n\n    useEffect(() => {\n        setIsDisabled(false)\n    }, [startNum, maxNum])\n\n\n    const increaseNum = () => {\n        if (counterNum < counter.maxValue) {\n            setCounterNum(counterNum + 1)\n        }\n    }\n    const resetNum = () => {\n        setCounterNum(counter.startValue)\n    }\n    const confirmValues = (min: number, max: number) => {\n        counter.startValue = min\n        counter.maxValue = max\n        setCounterNum(counter.startValue)\n        setError(false)\n        setIncorrectValueError(false)\n    }\n    const onConfirmClickHandler = () => {\n        confirmValues(startNum, maxNum)\n        setIsDisabled(true);\n    }\n\n    return (\n        <div className={'App'}>\n            <Animation/>\n            <Display counterNum={counterNum}\n                     startNum={startNum}\n                     maxNum={maxNum}\n                     inputMaxValue={counter.maxValue}\n                     inputStartValue={counter.startValue}\n                     setError={setError}\n                     error={error}\n                     setIncorrectValue={setIncorrectValueError}\n                     incorrectValue={incorrectValueError}\n            />\n            <Setting maxNum={maxNum}\n                     startNum={startNum}\n                     setStartNum={setStartNum}\n                     setMaxNum={setMaxNum}\n                     error={error}\n                     incorrectValueError={incorrectValueError}\n            />\n            <Button\n                title={'Set'}\n                // disabled={incorrectValueError || counter.startValue === startNum && counter.maxValue === maxNum}\n                disabled={isDisabled || incorrectValueError}\n                onClickHandler={onConfirmClickHandler}\n            />\n            <Button\n                title={'Inc'}\n                disabled={error || incorrectValueError || counter.maxValue === counterNum}\n                onClickHandler={increaseNum}\n            />\n            <Button\n                title={'Reset'}\n                onClickHandler={resetNum}\n                disabled={error || incorrectValueError}\n            />\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}